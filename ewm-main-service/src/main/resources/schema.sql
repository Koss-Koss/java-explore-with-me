CREATE TABLE IF NOT EXISTS users(
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    name    VARCHAR(255) NOT NULL,
    email   VARCHAR(512) NOT NULL,
    CONSTRAINT uq_email UNIQUE (email)
    );

CREATE TABLE IF NOT EXISTS categories(
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    name    VARCHAR(255) NOT NULL,
    CONSTRAINT uq_category_name UNIQUE (name)
    );

CREATE TABLE IF NOT EXISTS locations(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    lat         REAL NOT NULL,
    lon         REAL NOT NULL,
    event_id    BIGINT
    );

CREATE TABLE IF NOT EXISTS region_types(
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    name    VARCHAR(255) NOT NULL,
    CONSTRAINT uq_region_types_name UNIQUE (name)
    );

CREATE TABLE IF NOT EXISTS regions(
    id                  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    name                VARCHAR(255) NOT NULL,
    description         VARCHAR(7000),
    region_type_id      BIGINT NOT NULL,
    lat                 REAL NOT NULL,
    lon                 REAL NOT NULL,
    radius              REAL NOT NULL,
    CONSTRAINT fk_region_type FOREIGN KEY (region_type_id) REFERENCES region_types (id) ON DELETE CASCADE,
    CONSTRAINT uq_regions_name UNIQUE (name)
    );

CREATE TABLE IF NOT EXISTS events(
    id                  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    initiator_id        BIGINT NOT NULL,
    category_id         BIGINT NOT NULL,
    location_id         BIGINT NOT NULL,
    title               VARCHAR(120) NOT NULL,
    annotation          VARCHAR(2000) NOT NULL,
    description         VARCHAR(7000) NOT NULL,
    created_on          TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    event_date          TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    published_on        TIMESTAMP WITHOUT TIME ZONE,
    paid                BOOLEAN NOT NULL,
    participant_limit   INT DEFAULT 0,
    request_moderation  BOOLEAN NOT NULL DEFAULT TRUE,
    state               VARCHAR(64) NOT NULL,
    confirmed_requests  BIGINT NOT NULL,
    views               BIGINT,

    CONSTRAINT fk_event_iniciator FOREIGN KEY (initiator_id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT fk_event_category FOREIGN KEY (category_id) REFERENCES categories (id) ON DELETE CASCADE,
    CONSTRAINT fk_event_location FOREIGN KEY (location_id) REFERENCES locations (id) ON DELETE CASCADE
    );

CREATE TABLE IF NOT EXISTS requests(
    id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    requester_id    BIGINT NOT NULL,
    event_id        BIGINT NOT NULL,
    created_on      TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    status          VARCHAR(64) NOT NULL,
    CONSTRAINT fk_request_event FOREIGN KEY (requester_id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT fk_request_requester FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE
    );

CREATE TABLE IF NOT EXISTS compilations(
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    pinned  BOOLEAN NOT NULL,
    title   VARCHAR(255) NOT NULL,
    CONSTRAINT uq_compilation_title UNIQUE (title)
    );

CREATE TABLE IF NOT EXISTS compilation_events(
    compilation_id BIGINT NOT NULL,
    event_id       BIGINT NOT NULL,
    CONSTRAINT pk_compilation_event PRIMARY KEY (compilation_id, event_id),
    FOREIGN KEY (compilation_id) REFERENCES compilations (id) ON DELETE CASCADE,
    FOREIGN KEY (event_id) REFERENCES events (id) ON DELETE CASCADE
    );

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        -- переводим градусы широты в радианы
        rad_lat1 = pi() * lat1 / 180;
        -- переводим градусы долготы в радианы
        rad_lat2 = pi() * lat2 / 180;
        -- находим разность долгот
        theta = lon1 - lon2;
        -- переводим градусы в радианы
        rad_theta = pi() * theta / 180;
        -- находим длину ортодромии
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
            THEN dist = 1;
        END IF;

        dist = acos(dist);
        -- переводим радианы в градусы
        dist = dist * 180 / pi();
        -- переводим градусы в километры
        dist = dist * 60 * 1.8524;

        RETURN dist;
    END IF;
END;
'
LANGUAGE PLPGSQL;